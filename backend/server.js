require('dotenv').config(); // Load environment variables from .env file (for local development)

const express = require('express');
const cors = require('cors');
const OpenAI = require('openai');

const app = express();
const port = process.env.PORT || 3001; // Use PORT environment variable provided by Render

// Configure CORS
const frontendUrl = process.env.FRONTEND_URL || 'http://localhost:5173';

app.use(cors({
  origin: [
    frontendUrl,
    'http://localhost:5173',
    'http://127.0.0.1:5173',
    /\.onrender\.com$/
  ],
  credentials: true,
  methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'],
  allowedHeaders: ['Content-Type', 'Authorization'],
}));

app.use(express.json({ limit: '10mb' }));

const OPENAI_API_KEY = process.env.OPENAI_API_KEY;

if (!OPENAI_API_KEY) {
  console.error('CRITICAL ERROR: OPENAI_API_KEY is missing. Please set it in your .env file (local) or Render config (production).');
  process.exit(1);
}

const openai = new OpenAI({ apiKey: OPENAI_API_KEY });

if (typeof fetch === 'undefined') {
  console.error("Node version doesn't support native fetch. Please ensure your Node.js environment is v18 or higher.");
  process.exit(1);
}

app.get('/health', (req, res) => {
  res.json({
    status: 'OK',
    timestamp: new Date().toISOString(),
    nodeVersion: process.version,
    environment: process.env.NODE_ENV || 'development'
  });
});

app.get('/', (req, res) => {
  res.json({
    message: 'WHORU Backend API is running! Access /health for status or /generate-content for main functionality.',
    endpoints: ['/health', '/generate-content']
  });
});

// Define default empty structured object for reliable frontend rendering
const defaultStructuredDescription = {
    type: "",
    name: "",
    description_line1: "",
    description_line2: "",
    description_line3: "",
    general_summary: "",
    strengths: [],
    challenges: [],
    career_advice: [],
    relationship_tips: [],
    self_improvement_habits: [],
    coach_message: ""
};

// Define defaultStructuredDescriptionKeys globally for consistent mapping in regex fallback
const defaultStructuredDescriptionKeys = Object.keys(defaultStructuredDescription);

// Function to clean individual text items (e.g., list items)
const cleanAndTrimText = (text) => {
    if (typeof text !== 'string') return "";
    return text.replace(/^- /, '') // Remove leading dash and space
               .replace(/(\d+\.?\s*[\-.]?\s*)/g, '') // Remove numbers (e.g., "1.", "2. ") and their separators
               .replace(/[ЁЯФетЪая╕ПЁЯзнтЭдя╕ПЁЯзаЁЯЧгя╕ПтЬЕтАв]/g, '') // Remove emojis and common bullet symbols
               .replace(/\s+/g, ' ') // Replace multiple spaces/newlines with single space
               .trim();
};


// Main route to generate content
app.post('/generate-content', async (req, res) => {
  console.log("--- New Request to /generate-content ---");
  console.log("Received request body:", JSON.stringify(req.body, null, 2)); // Log full request for debugging

  try {
    const { contents, generationConfig } = req.body;

    if (!contents || !Array.isArray(contents) || contents.length === 0) {
      console.error('Validation Error: "contents" array is required and must not be empty.');
      return res.status(400).json({ error: '"contents" array is required.' });
    }

    // Extract dynamic type info from Frontend Request's text content
    const frontendPayload = JSON.parse(contents[0].parts[0].text); // Frontend sends a JSON string inside text
    const mbtiTypeFromFrontend = frontendPayload.type || "UNKNOWN_TYPE";
    const mbtiTypeName = frontendPayload.name || 'Unknown Type Name';
    const mbtiTypeDescription = frontendPayload.description || 'Unknown Type Description';
    const promptKey = frontendPayload.promptKey || 'initial_description';

    console.log("Extracted Type Code from Frontend:", mbtiTypeFromFrontend);
    console.log("Extracted Type Name:", mbtiTypeName);
    console.log("Extracted Type Description:", mbtiTypeDescription);
    console.log("Extracted Prompt Key:", promptKey);

    let promptText = "";
    let responseSchema = {};

    if (promptKey === 'initial_description') {
        promptText = `
ржкрзНрж░рж┐ржпрж╝ OpenAI,
ржЖржкржирж┐ ржПржХржЬржи ржЕрждрзНржпржирзНржд ржжржХрзНрж╖ ржПржмржВ ржЕржнрж┐ржЬрзНржЮ ржмрж╛ржВрж▓рж╛ ржнрж╛рж╖рж╛ржнрж╛рж╖рзА ржЬрзАржмржи ржХрзЛржЪред ржЖржкржирж╛рж░ ржнрж╛рж╖рж╛рж░ ржмрзНржпржмрж╣рж╛рж░ рж╣ржмрзЗ ржЕрждрзНржпржирзНржд ржорж╛рж░рзНржЬрж┐ржд ржПржмржВ рж╢рзНрж░ржжрзНржзрж╛ржкрзВрж░рзНржгред ржЖржкржирж╛рж░ ржкрзНрж░рждрж┐ржЯрж┐ рж╢ржмрзНржж, ржмрж╛ржХрзНржп ржПржмржВ ржЕржирзБржЪрзНржЫрзЗржжрзЗ ржХржарзЛрж░ржнрж╛ржмрзЗ 'ржЖржкржирж┐' рж╕ржорзНржмрзЛржзржи ржмрзНржпржмрж╣рж╛рж░ ржХрж░ржмрзЗржи, ржХрзЛржирзЛ ржЕржмрж╕рзНржерж╛рждрзЗржЗ 'рждрзБржорж┐' ржмрзНржпржмрж╣рж╛рж░ ржХрж░рж╛ ржпрж╛ржмрзЗ ржирж╛ред ржЖржкржирж╛рж░ ржЙрждрзНрждрж░ рж╕ржВржХрзНрж╖рж┐ржкрзНржд, рж╕рж░рж╛рж╕рж░рж┐ ржПржмржВ ржХрж╛рж░рзНржпржХрж░ рж╣ржмрзЗред ржЕрж╣рзЗрждрзБржХ ржирж╛ржЯржХрзАржпрж╝рждрж╛, ржЪржЯржХржжрж╛рж░ рж╢ржмрзНржжржЪржпрж╝ржи ржмрж╛ "ржЬрзЗржи-ржЬрзЗржб" рж╕рзНржЯрж╛ржЗрж▓рзЗрж░ ржЕржнрж┐ржмрзНржпржХрзНрждрж┐ рж╕ржорзНржкрзВрж░рзНржгрж░рзВржкрзЗ ржкрж░рж┐рж╣рж╛рж░ ржХрж░рзБржиред ржПржоржиржнрж╛ржмрзЗ рж▓рж┐ржЦрзБржи ржпрзЗржи ржПржХржЬржи ржоржзрзНржпржмржпрж╝рж╕рзА, ржЪрж┐ржирзНрждрж╛рж╢рзАрж▓ ржмрзНржпржХрзНрждрж┐ ржЖржкржирж╛рж░ ржкрж░рж╛ржорж░рзНрж╢ржЧрзБрж▓рж┐ рж╕рж╣ржЬрзЗ ржмрзБржЭрждрзЗ ржкрж╛рж░рзЗ ржПржмржВ рж╕рзЗржЧрзБрж▓рзЛ рждрж╛рж░ ржЬрзАржмржирзЗ ржкрзНрж░ржпрж╝рзЛржЧ ржХрж░рждрзЗ ржЖржЧрзНрж░рж╣рзА рж╣ржпрж╝ред ржЖржкржирж╛рж░ рж▓рзЗржЦрж╛рж░ ржзрж░ржг рж╣ржмрзЗ ржЖржмрзЗржЧржкрзНрж░ржмржг ржХрж┐ржирзНрждрзБ рж╕рж╣ржЬ-рж╕рж░рж▓, рж╕рзНржкрж╖рзНржЯ ржПржмржВ ржорж╛рж░рзНржЬрж┐ржд ржмрж╛ржВрж▓рж╛ ржнрж╛рж╖рж╛ржпрж╝ред

ржПржЗ ржмрзНржпржХрзНрждрж┐рждрзНржм ржкрзНрж░рзЛржлрж╛ржЗрж▓ржЯрж┐ ржЬржВржЧрж┐ржпрж╝рж╛ржи ржХржЧржирж┐ржЯрж┐ржн ржерж┐ржУрж░рж┐ ржПржмржВ рззрзмржЯрж┐ ржмрзНржпржХрзНрждрж┐рждрзНржм ржЖрж░рзНржХрж┐ржЯрж╛ржЗржкрзЗрж░ ржЙржкрж░ ржнрж┐рждрзНрждрж┐ ржХрж░рзЗ рждрзИрж░рж┐ рж╣ржпрж╝рзЗржЫрзЗред

ржмрзНржпржХрзНрждрж┐рждрзНржмрзЗрж░ ржзрж░ржг "${mbtiTypeFromFrontend}" (${mbtiTypeName} - ${mbtiTypeDescription}) ржПрж░ ржЬржирзНржп ржПржХржЯрж┐ ржЧржнрзАрж░ ржЕржирзНрждрж░рзНржжрзГрж╖рзНржЯрж┐ржкрзВрж░рзНржг, ржЖржмрзЗржЧржкрзНрж░ржмржг ржПржмржВ рж╕рж╛ржВрж╕рзНржХрзГрждрж┐ржХржнрж╛ржмрзЗ ржкрзНрж░рж╛рж╕ржЩрзНржЧрж┐ржХ ржмрж░рзНржгржирж╛ ржПржХржЯрж┐ JSON ржЕржмржЬрзЗржХрзНржЯ ржЖржХрж╛рж░рзЗ рждрзИрж░рж┐ ржХрж░рзБржиред ржЖржкржирж╛рж░ ржЙрждрзНрждрж░рзЗ ржХрзЛржирзЛ ржзрж░ржирзЗрж░ ржнрзВржорж┐ржХрж╛, ржЕрждрж┐рж░рж┐ржХрзНржд ржЯрзЗржХрзНрж╕ржЯ, ржмрж╛ "ржмрзНржпржХрзНрждрж┐рждрзНржмрзЗрж░ ржзрж░ржг:" ржПрж░ ржорждрзЛ ржХрзЛржирзЛ рж▓рж╛ржЗржи ржЕржирзНрждрж░рзНржнрзБржХрзНржд ржХрж░ржмрзЗржи ржирж╛ред ржЖржкржирж╛рж░ ржЙрждрзНрждрж░ржЯрж┐ рж╕рж░рж╛рж╕рж░рж┐ JSON ржЕржмржЬрзЗржХрзНржЯ ржжрж┐ржпрж╝рзЗ рж╢рзБрж░рзБ рж╣ржмрзЗред

JSON ржЕржмржЬрзЗржХрзНржЯрзЗрж░ ржирж┐ржорзНржирж▓рж┐ржЦрж┐ржд ржХрзАржЧрзБрж▓рж┐ ржПржмржВ рждрж╛ржжрзЗрж░ ржорж╛ржиржЧрзБрж▓рж┐ ржерж╛ржХрждрзЗ рж╣ржмрзЗ:
- \`personality_type_info\`: (object) ржПржЗ ржЕржмржЬрзЗржХрзНржЯрзЗ ржирж┐ржорзНржирж▓рж┐ржЦрж┐ржд ржХрзАржЧрзБрж▓рж┐ ржерж╛ржХржмрзЗ:
    - \`type\`: (string) 4-ржЕржХрзНрж╖рж░рзЗрж░ ржЯрж╛ржЗржк ржХрзЛржб (ржпрзЗржоржи: ENFP, ESFJ)ред ржПржЗ ржорж╛ржиржЯрж┐ ржЕржмрж╢рзНржпржЗ "${mbtiTypeFromFrontend}" рж╣ржмрзЗред
    - \`name\`: (string) ржЯрж╛ржЗржкрзЗрж░ ржирж╛ржо (ржпрзЗржоржи: тАЬThe Enthusiastic OriginatorтАЭ, тАЬThe Harmonious SupporterтАЭ)ред ржПржЗ ржорж╛ржиржЯрж┐ ржЕржмрж╢рзНржпржЗ "${mbtiTypeName}" рж╣ржмрзЗред
    - \`description_line1\`: (string) ржЯрж╛ржЗржкрзЗрж░ ржкрзНрж░ржержо ржмрж░рзНржгржирж╛ рж▓рж╛ржЗржи (ржпрзЗржоржи: ржЖржкржирж┐ рж╕рж╣ржЬрж╛рждржнрж╛ржмрзЗ ржкрзНрж░рж╛ржгржмржирзНржд, ржХрж▓рзНржкржирж╛ржкрзНрж░ржмржг, ржПржмржВ ржорж╛ржирзБрж╖рзЗрж░ рж╣рзГржжржпрж╝ ржЫрзБржБржпрж╝рзЗ ржпрзЗрждрзЗ ржЪрж╛ржиред)ред
    - \`description_line2\`: (string) ржЯрж╛ржЗржкрзЗрж░ ржжрзНржмрж┐рждрзАржпрж╝ ржмрж░рзНржгржирж╛ рж▓рж╛ржЗржи (ржпрзЗржоржи: ржирждрзБржирждрзНржм, ржкрж░рж┐ржмрж░рзНрждржи ржЖрж░ рж╕ржВржпрзЛржЧрзЗрж░ ржЦрзЛржБржЬрзЗ ржЖржкржирж┐ ржХржЦржирзЛржЗ ржХрзНрж▓рж╛ржирзНржд рж╣ржи ржирж╛ред)ред
    - \`description_line3\`: (string) ржЯрж╛ржЗржкрзЗрж░ рждрзГрждрзАржпрж╝ ржмрж░рзНржгржирж╛ рж▓рж╛ржЗржи (ржпрзЗржоржи: ржЖржкржирж╛рж░ ржирж┐рж░рзНржнрзАржХ рж╣рж╛рж╕рж┐ ржжрзЗржЦрзЗ ржорж╛ржирзБрж╖ ржмрзЛржЭрзЗ ржирж╛, ржнрзЗрждрж░рзЗ ржЖржкржирж┐ ржХрждржЯрж╛ ржЕржирзБржнрзВрждрж┐ржкрзНрж░ржмржг ржЖрж░ ржХрзЛржорж▓ред)ред
- \`general_summary\`: (string) ржПржХржЯрж┐ рж╕ржорзГржжрзНржз, ржХрж╛ржмрзНржпрж┐ржХ ржЕржирзБржЪрзНржЫрзЗржж ржпрж╛ ржмрзНржпржХрзНрждрж┐рж░ ржнрзЗрждрж░рзЗрж░ ржкрзНрж░ржХрзГрждрж┐, ржЖржмрзЗржЧрж┐ржХ ржЧржнрзАрж░рждрж╛, рж╕рж┐ржжрзНржзрж╛ржирзНржд ржЧрзНрж░рж╣ржгрзЗрж░ ржзрж░ржг ржПржмржВ рждрж╛рж░рж╛ ржкрзГржерж┐ржмрзАржХрзЗ ржХрзАржнрж╛ржмрзЗ ржжрзЗржЦрзЗ рждрж╛ ржмрж░рзНржгржирж╛ ржХрж░ржмрзЗред ржирж░ржо, ржХрзЛржЪрж┐ржВ-рж╕рзНржЯрж╛ржЗрж▓рзЗрж░ ржнрж╛рж╖рж╛ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзБржи ржпрж╛рждрзЗ "ржЖрж╣рзН, ржПржЯрж╛ рж╕рждрзНржпрж┐ржЗ ржЖржорж┐" ржПржоржи ржЕржирзБржнрзВрждрж┐ рждрзИрж░рж┐ рж╣ржпрж╝ред ржПрждрзЗ ржирж┐ржорзНржирж▓рж┐ржЦрж┐ржд ржжрзБржЯрж┐ рж▓рж╛ржЗржи ржЕржмрж╢рзНржпржЗ ржЕржирзНрждрж░рзНржнрзБржХрзНржд ржХрж░ржмрзЗржи: "рж╕ржмрж╛рж░ ржоржзрзНржпрзЗ ржПржХржЯрзБ ржЖрж╢рж╛рж░ ржЖрж▓рзЛ ржЫржбрж╝рж╛рждрзЗ ржнрж╛рж▓рзЛржмрж╛рж╕рзЗржи, ржпржжрж┐ржУ ржорж╛ржЭрзЗ ржорж╛ржЭрзЗ ржЖржкржирж┐ржЗ ржирж┐ржЬрзЗрж░ ржЬржирзНржп рж╕рзЗржЗ ржЖрж▓рзЛ ржкрзЗрждрзЗ ржЪрж╛ржиред" ржПржмржВ "ржорж╛ржирзБрж╖ ржкрзНрж░рж╛ржпрж╝ржЗ ржмрзБржЭрждрзЗ ржкрж╛рж░рзЗ ржирж╛тАФржЖржкржирж╛рж░ ржЪрж┐ржирзНрждрж╛рж░ ржХрждржЯрж╛ ржЧржнрзАрж░рждрж╛ред" ржПржЗ рж▓рж╛ржЗржиржЧрзБрж▓рзЛ ржкрзНрж░рж╛ржХрзГрждрж┐ржХ ржнрж╛ржмрзЗ ржЕржирзБржЪрзНржЫрзЗржжрзЗ ржорж┐рж╢рзЗ ржпрж╛ржмрзЗред
- \`strengths\`: (array of objects) рзлржЯрж┐ ржкрзНрж░ржзрж╛ржи рж╢ржХрзНрждрж┐рж░ рждрж╛рж▓рж┐ржХрж╛ред ржкрзНрж░рждрж┐ржЯрж┐ ржЕржмржЬрзЗржХрзНржЯрзЗ \`name\` (string, ржмрж╛ржВрж▓рж╛ржпрж╝) ржПржмржВ \`explanation\` (string, рзз-рзи рж▓рж╛ржЗржирзЗрж░ ржмрзНржпрж╛ржЦрзНржпрж╛) ржерж╛ржХрждрзЗ рж╣ржмрзЗред
- \`challenges\`: (array of objects) рзйржЯрж┐ ржмрзНржпржХрзНрждрж┐рждрзНржмрзЗрж░ ржЪрзНржпрж╛рж▓рзЗржЮрзНржЬрзЗрж░ рждрж╛рж▓рж┐ржХрж╛ред ржкрзНрж░рждрж┐ржЯрж┐ ржЕржмржЬрзЗржХрзНржЯрзЗ \`description\` (string, рж╕ржВржХрзНрж╖рж┐ржкрзНржд ржЖржмрзЗржЧрж┐ржХ ржЪрзНржпрж╛рж▓рзЗржЮрзНржЬ) ржПржмржВ \`advice\` (string, ржЙрж╖рзНржг, ржХрзЛржЪ-рж╕рзНржЯрж╛ржЗрж▓рзЗрж░ ржкрж░рж╛ржорж░рзНрж╢) ржерж╛ржХрждрзЗ рж╣ржмрзЗред
- \`career_advice\`: (array of objects) рзй-рзлржЯрж┐ ржкрзЗрж╢рж╛рж░ рждрж╛рж▓рж┐ржХрж╛ ржпрж╛ ржмрзНржпржХрзНрждрж┐рж░ ржкрзНрж░ржХрзГрждрж┐рж░ рж╕рж╛ржерзЗ рж╕рж╛ржоржЮрзНржЬрж╕рзНржпржкрзВрж░рзНржг, ржЖржзрзБржирж┐ржХ ржкрзЗрж╢рж╛ ржпрзЗржоржи - ржХржирзНржЯрзЗржирзНржЯ ржХрзНрж░рж┐ржпрж╝рзЗржЯрж░, ржбрзЗржЯрж╛ ржЕрзНржпрж╛ржирж╛рж▓рж┐рж╕рзНржЯ, рж╕рзНржЯрж╛рж░рзНржЯржЖржк ржЙржжрзНржпрзЛржХрзНрждрж╛, ржбрж┐ржЬрж┐ржЯрж╛рж▓ ржорж╛рж░рзНржХрзЗржЯрж┐ржВ рж╕рзНржкрзЗрж╢рж╛рж▓рж┐рж╕рзНржЯ, ржХржорж┐ржЙржирж┐ржЯрж┐ ржорзНржпрж╛ржирзЗржЬрж╛рж░, ржлрзНрж░рж┐рж▓рзНржпрж╛ржирзНрж╕ рж▓рзЗржЦржХ, рж╕ржлржЯржУржпрж╝рзНржпрж╛рж░ ржбрзЗржнрзЗрж▓ржкрж╛рж░, ржкрзНрж░ржЬрзЗржХрзНржЯ ржорзНржпрж╛ржирзЗржЬрж╛рж░, рж╕рж╛ржорж╛ржЬрж┐ржХ ржХрж░рзНржорзА, рж╢рж┐ржХрзНрж╖ржХ, ржХрж╛ржЙржирзНрж╕рзЗрж▓рж░, ржЗржнрзЗржирзНржЯ ржЕрж░рзНржЧрж╛ржирж╛ржЗржЬрж╛рж░ ржЗрждрзНржпрж╛ржжрж┐ ржЕржирзНрждрж░рзНржнрзБржХрзНржд ржХрж░рзБржиред ржкрзНрж░рждрж┐ржЯрж┐ ржЕржмржЬрзЗржХрзНржЯрзЗ \`field\` (string, ржмрж╛ржВрж▓рж╛ржпрж╝), \`reason\` (string, ржХрзЗржи ржПржЗ ржкрзЗрж╢рж╛ ржЙржкржпрзБржХрзНржд), ржПржмржВ \`action\` (string, ржРржЪрзНржЫрж┐ржХ, рзз-рж▓рж╛ржЗржирзЗрж░ ржкржжржХрзНрж╖рзЗржк) ржерж╛ржХрждрзЗ рж╣ржмрзЗред
- \`relationship_tips\`: (array of objects) рзй-рзлржЯрж┐ ржЕржирзНрждрж░рзНржжрзГрж╖рзНржЯрж┐рж░ рждрж╛рж▓рж┐ржХрж╛ред ржкрзНрж░рждрж┐ржЯрж┐ ржЕржмржЬрзЗржХрзНржЯрзЗ \`general_behavior\` (string, ржкрзНрж░рзЗржо/ржмржирзНржзрзБрждрзНржмрзЗ рж╕рж╛ржзрж╛рж░ржг ржЖржЪрж░ржг) ржПржмржВ \`tip\` (string, рж╕ржорзНржкрж░рзНржХ ржЙржирзНржиржд ржХрж░рж╛рж░ ржЬржирзНржп ржмрзНржпржмрж╣рж╛рж░рж┐ржХ/ржЖржмрзЗржЧрж┐ржХ ржкрж░рж╛ржорж░рзНрж╢) ржерж╛ржХрждрзЗ рж╣ржмрзЗред
- \`self_improvement_habits\`: (array of objects) рзйржЯрж┐ ржжрзИржирж┐ржХ ржмрж╛ ржорж╛ржирж╕рж┐ржХрждрж╛рж░ ржЕржнрзНржпрж╛рж╕рзЗрж░ рждрж╛рж▓рж┐ржХрж╛ред ржкрзНрж░рждрж┐ржЯрж┐ ржЕржмржЬрзЗржХрзНржЯрзЗ \`habit\` (string, ржкрзНрж░рж╕рзНрждрж╛ржмрж┐ржд ржЕржнрзНржпрж╛рж╕) ржПржмржВ \`benefit\` (string, ржПрж░ ржорж╛ржирж╕рж┐ржХ/ржмрзНржпржХрзНрждрж┐ржЧржд рж╕рзБржмрж┐ржзрж╛) ржерж╛ржХрждрзЗ рж╣ржмрзЗред
- \`coach_message\`: (string) ржПржХржЯрж┐ ржЪрзВржбрж╝рж╛ржирзНржд ржЖржмрзЗржЧржкрзНрж░ржорзНржкржЯ ржпрж╛ ржПржХржЬржи ржЬрзНржЮрж╛ржирзА ржмрж╛ржЩрж╛рж▓рж┐ ржЬрзАржмржи ржХрзЛржЪрзЗрж░ ржорждрзЛ рж╢рзЛржирж╛ржмрзЗ, ржпрж╛ ржЧржнрзАрж░ ржкрзНрж░рждрж┐ржлрж▓ржи ржПржмржВ ржЖрж░ржУ ржЕржирзНржмрзЗрж╖ржгрзЗрж░ ржЖржХрж╛ржЩрзНржХрзНрж╖рж╛ ржЬрж╛ржЧрж╛ржмрзЗ, рж╕рж░рзНржмржжрж╛ 'ржЖржкржирж┐' рж╕ржорзНржмрзЛржзржи ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЗред ржПржЯрж┐ ржЕржмрж╢рзНржпржЗ рж╕рж╣ржЬ-рж╕рж░рж▓ ржПржмржВ ржорж╛рж░рзНржЬрж┐ржд ржмрж╛ржВрж▓рж╛ ржнрж╛рж╖рж╛ржпрж╝ рж╣ржмрзЗ, ржХрзЛржирзЛ ржЕрж╣рзЗрждрзБржХ ржирж╛ржЯржХрзАржпрж╝рждрж╛ ржмрж╛ ржЪржЯржХржжрж╛рж░ рж╢ржмрзНржж ржмрзНржпржмрж╣рж╛рж░ ржХрж░ржмрзЗржи ржирж╛ред

ржЖржкржирж╛рж░ ржкрзНрж░рждрж┐ржХрзНрж░рж┐ржпрж╝рж╛ ржЕржмрж╢рзНржпржЗ ржПржХржЯрж┐ ржмрзИржз JSON ржЕржмржЬрзЗржХрзНржЯ рж╣рждрзЗ рж╣ржмрзЗ ржПржмржВ JSON ржЕржмржЬрзЗржХрзНржЯ ржЫрж╛ржбрж╝рж╛ ржЖрж░ ржХрзЛржирзЛ ржЕрждрж┐рж░рж┐ржХрзНржд ржЯрзЗржХрзНрж╕ржЯ ржерж╛ржХржмрзЗ ржирж╛ред
`;
            responseSchema = {
                type: "OBJECT",
                properties: {
                    "personality_type_info": {
                        type: "OBJECT",
                        properties: {
                            "type": { "type": "STRING" },
                            "name": { "type": "STRING" },
                            "description_line1": { "type": "STRING" },
                            "description_line2": { "type": "STRING" },
                            "description_line3": { "type": "STRING" }
                        },
                        required: ["type", "name", "description_line1", "description_line2", "description_line3"]
                    },
                    "general_summary": { "type": "STRING" },
                    "strengths": {
                        type: "ARRAY",
                        items: {
                            type: "OBJECT",
                            properties: { "name": { "type": "STRING" }, "explanation": { "type": "STRING" } },
                            required: ["name", "explanation"]
                        }
                    },
                    "challenges": {
                        type: "ARRAY",
                        items: {
                            type: "OBJECT",
                            properties: { "description": { "type": "STRING" }, "advice": { "type": "STRING" } },
                            required: ["description", "advice"]
                        }
                    },
                    "career_advice": {
                        type: "ARRAY",
                        items: {
                            type: "OBJECT",
                            properties: { "field": { "type": "STRING" }, "reason": { "type": "STRING" }, "action": { "type": "STRING" } },
                            required: ["field", "reason"]
                        }
                    },
                    "relationship_tips": {
                        type: "ARRAY",
                        items: {
                            type: "OBJECT",
                            properties: { "general_behavior": { "type": "STRING" }, "tip": { "type": "STRING" } },
                            required: ["general_behavior", "tip"]
                        }
                    },
                    "self_improvement_habits": {
                        type: "ARRAY",
                        items: {
                            type: "OBJECT",
                            properties: { "habit": { "type": "STRING" }, "benefit": { "type": "STRING" } },
                            required: ["habit", "benefit"]
                        }
                    },
                    "coach_message": { "type": "STRING" }
                },
                required: [
                    "personality_type_info",
                    "general_summary",
                    "strengths",
                    "challenges",
                    "career_advice",
                    "relationship_tips",
                    "self_improvement_habits",
                    "coach_message"
                ]
            };
    } else if (promptKey === 'career_sub_prompt') {
            promptText = `For personality type ${mbtiTypeFromFrontend}, provide expanded and modern career guidance in Bengali.The response must be a JSON object with:

- \`career_guidance_message\`: (string) A warm, intuitive paragraph that explains what kind of career environments are ideal for this personality тАФ e.g., team-based, solo, creative, structured, growth-driven. Mention emotional needs too (freedom, meaning, recognition, impact).

- \`specific_actions\`: (array of strings) List 3тАУ5 specific, actionable suggestions.
  Examples:
  - тАЬржПржХржЯрж┐ ржлрзНрж░рж┐рж▓рзНржпрж╛ржирзНрж╕рж┐ржВ ржкрзНрж▓рзНржпрж╛ржЯржлрж░рзНржорзЗ ржкрзНрж░рзЛржлрж╛ржЗрж▓ ржЦрзБрж▓рзЗ рж▓рзЗржЦрж╛рж▓рзЗржЦрж┐ ржмрж╛ ржбрж┐ржЬрж╛ржЗржи рж╢рзБрж░рзБ ржХрж░рзБржиредтАЭ
  - тАЬржПржХржЯрж┐ ржбрзЗржЯрж╛ ржЕрзНржпрж╛ржирж╛рж▓рж╛ржЗрж╕рж┐рж╕ ржХрзЛрж░рзНрж╕рзЗ ржирж╛ржо рж▓рзЗржЦрж╛ржи ржПржмржВ ржкрзНрж░ржЬрзЗржХрзНржЯ рждрзИрж░рж┐ ржХрж░рзЗ ржжрзЗржЦрж╛ржиредтАЭ
  - тАЬржирж┐ржЬрзЗрж░ ржПржХржЯрж┐ ржмрзНрж░рзНржпрж╛ржирзНржб ржмрж╛ рж╕рзЗржмрж╛рж░ ржкрзЗржЫржирзЗ ржХрж╛ржЬ рж╢рзБрж░рзБ ржХрж░рзБржи, ржзрж╛ржкрзЗ ржзрж╛ржкрзЗредтАЭ
All output must be in Bengali. Style should be coaching-focused and motivational, with real-world relevance. Output must be a valid JSON object only. **ржирж┐рж╢рзНржЪрж┐ржд ржХрж░рзБржи ржпрзЗ ржЖржкржирж╛рж░ ржкрзНрж░рждрж┐ржХрзНрж░рж┐ржпрж╝рж╛ ржПржХржЯрж┐ ржмрзИржз JSON ржЕржмржЬрзЗржХрзНржЯред**`;
            responseSchema = {
                type: "OBJECT",
                properties: {
                    career_guidance_message: { type: "STRING" },
                    specific_actions: { type: "ARRAY", items: { type: "STRING" } }
                },
                required: ["career_guidance_message", "specific_actions"]
            };
    } else if (promptKey === 'relationship_sub_prompt') {
            promptText = `For personality type ${mbtiTypeFromFrontend}, provide deeper relationship and friendship guidance in Bengali.The response must be a JSON object with:

- \`relationship_insight\`: (string) An emotional, intuitive paragraph explaining how this type typically behaves in love and friendships тАФ their strengths, emotional needs, and common challenges. Should be heart-touching and insightful.

- \`actionable_tips\`: (array of strings) 3тАУ5 emotionally intelligent suggestions, examples:
  - тАЬржирж┐ржЬрзЗрж░ ржЪрж╛ржУржпрж╝рж╛-ржоржирзЗрж░ ржХржерж╛ рж╕рзНржкрж╖рзНржЯржнрж╛ржмрзЗ ржкрзНрж░ржХрж╛рж╢ ржХрж░рждрзЗ рж╢рж┐ржЦрзБржиредтАЭ
  - тАЬрж╕ржмрж╕ржоржпрж╝ ржЕржирзНржпржХрзЗ ржЦрзБрж╢рж┐ ржХрж░рждрзЗ ржЧрж┐ржпрж╝рзЗ ржирж┐ржЬрзЗржХрзЗ ржнрзБрж▓рзЗ ржпрж╛ржмрзЗржи ржирж╛.тАЭ
  - тАЬржШржирж┐рж╖рзНржарждрж╛ ржерзЗржХрзЗ ржирж╛ ржкрж╛рж▓рж┐ржпрж╝рзЗ ржзрзАрж░рзЗ ржзрзАрж░рзЗ рж╕ржорзНржкрж░рзНржХрзЗрж░ ржЧржнрзАрж░рзЗ ржкрзНрж░ржмрзЗрж╢ ржХрж░рзБржиредтАЭ
Must be written in Bengali. Tone must feel like a wise friend or life coach offering heartfelt guidance.
Output must be a valid JSON object. Do not include explanations outside the JSON format. **ржирж┐ ржирж┐рж╢рзНржЪрж┐ржд ржХрж░рзБржи ржпрзЗ ржЖржкржирж╛рж░ ржкрзНрж░рждрж┐ржХрзНрж░рж┐ржпрж╝рж╛ ржПржХржЯрж┐ ржмрзИржз JSON ржЕржмржЬрзЗржХрзНржЯред**`;
            responseSchema = {
                type: "OBJECT",
                properties: {
                    relationship_insight: { type: "STRING" },
                    actionable_tips: { type: "ARRAY", items: { type: "STRING" } }
                },
                required: ["relationship_insight", "actionable_tips"]
            };
    }

    const openaiPayload = {
      model: "gpt-4o",
      messages: [{ role: 'user', content: promptText }],
      temperature: generationConfig?.temperature || 0.7,
      max_tokens: 4000,
      ...(Object.keys(responseSchema).length > 0 && {
        response_format: { type: "json_object" }
      })
    };

    console.log("Sending payload to OpenAI:", JSON.stringify(openaiPayload, null, 2));

    const openaiResponse = await openai.chat.completions.create(openaiPayload);

    console.log("--- OpenAI API Raw Response Object ---");
    console.log(JSON.stringify(openaiResponse, null, 2));

    if (!openaiResponse || !openaiResponse.choices || openaiResponse.choices.length === 0) {
        console.error("OpenAI Response Error: No choices found in response.");
        return res.status(500).json({ error: "OpenAI did not return any content." });
    }

    const generatedTextContent = openaiResponse.choices[0].message.content;
    console.log("OpenAI generated text content:", generatedTextContent);

    let finalResponseData;
    // For initial_description, parse the JSON. For sub-prompts, they are already JSON.
  if (promptKey === 'initial_description') {
    try {
        finalResponseData = JSON.parse(generatedTextContent);
        console.log("Parsed AI data for initial description:", finalResponseData);
    } catch (jsonParseError) {

            console.error("Error parsing initial description JSON:", jsonParseError, "Raw text:", generatedTextContent);
            return res.status(500).json({ error: 'OpenAI returned invalid JSON for initial description', raw: generatedTextContent });
        }
    } else {
        // Sub-prompts are already expected to be JSON from the AI
        finalResponseData = JSON.parse(generatedTextContent); // Assuming sub-prompts always return valid JSON
    }

    // Clean and validate the final response data before sending to frontend
    // *** CRITICAL MODIFIED SECTION: Directly populating cleanedResultData ***
    let cleanedResultData = {}; // Start with an empty object

    // Populate cleanedResultData by explicitly assigning each field and cleaning it

    // String fields
    cleanedResultData.type = cleanAndTrimText(finalResponseData.type || "");
    cleanedResultData.name = cleanAndTrimText(finalResponseData.name || "");
    cleanedResultData.description_line1 = cleanAndTrimText(finalResponseData.description_line1 || "");
    cleanedResultData.description_line2 = cleanAndTrimText(finalResponseData.description_line2 || "");
    cleanedResultData.description_line3 = cleanAndTrimText(finalResponseData.description_line3 || "");
    cleanedResultData.general_summary = cleanAndTrimText(finalResponseData.general_summary || "");
    cleanedResultData.coach_message = cleanAndTrimText(finalResponseData.coach_message || "");

    // Array fields
    cleanedResultData.strengths = Array.isArray(finalResponseData.strengths) ?
        finalResponseData.strengths.map(item => ({
            name: cleanAndTrimText(item.name || ""),
            explanation: cleanAndTrimText(item.explanation || "")
        })).filter(item => item.name || item.explanation) : [];

    cleanedResultData.challenges = Array.isArray(finalResponseData.challenges) ?
        finalResponseData.challenges.map(item => ({
            description: cleanAndTrimText(item.description || ""),
            advice: cleanAndTrimText(item.advice || "")
        })).filter(item => item.description || item.advice) : [];

    cleanedResultData.career_advice = Array.isArray(finalResponseData.career_advice) ?
        finalResponseData.career_advice.map(item => ({
            field: cleanAndTrimText(item.field || ""),
            reason: cleanAndTrimText(item.reason || ""),
            action: cleanAndTrimText(item.action || "")
        })).filter(item => item.field || item.reason || item.action) : [];

    cleanedResultData.relationship_tips = Array.isArray(finalResponseData.relationship_tips) ?
        finalResponseData.relationship_tips.map(item => ({
            general_behavior: cleanAndTrimText(item.general_behavior || ""),
            tip: cleanAndTrimText(item.tip || "")
        })).filter(item => item.general_behavior || item.tip) : [];

    cleanedResultData.self_improvement_habits = Array.isArray(finalResponseData.self_improvement_habits) ?
        finalResponseData.self_improvement_habits.map(item => ({
            habit: cleanAndTrimText(item.habit || ""),
            benefit: cleanAndTrimText(item.benefit || "")
        })).filter(item => item.habit || item.benefit) : [];

    // Final fallback to defaultStructuredDescription for any keys that were completely missing
    // This loop ensures that cleanedResultData has ALL the keys defined in defaultStructuredDescription
    // with their appropriate types, even if AI didn't provide them at all.
    for (const key of defaultStructuredDescriptionKeys) {
        if (!cleanedResultData.hasOwnProperty(key) || cleanedResultData[key] === null || cleanedResultData[key] === undefined ||
            (typeof defaultStructuredDescription[key] === 'string' && cleanedResultData[key] === '') ||
            (Array.isArray(defaultStructuredDescription[key]) && Array.isArray(cleanedResultData[key]) && cleanedResultData[key].length === 0))
        {
            cleanedResultData[key] = defaultStructuredDescription[key];
        }
    }
    // --- END CRITICAL MODIFIED SECTION ---


    const finalResponse = {
      candidates: [
        {
          content: {
            parts: [
              {
                text: JSON.stringify(cleanedResultData) // Stringify the cleaned data before sending to frontend
              }
            ]
          }
        }
      ]
    };

    console.log("Sending final response to frontend:", JSON.stringify(finalResponse, null, 2));
    res.json(finalResponse);

  } catch (error) {
    console.error("--- OpenAI API Call Failed or Unhandled Error ---");
    console.error("  Error message:", error.message);
    console.error("  Error name:", error.name);
    if (error.status) console.error("  HTTP Status:", error.status);
    if (error.code) console.error("  OpenAI Error Code:", error.code);
    if (error.type) console.error("  OpenAI Error Type:", error.type);
    if (error.param) console.error("  OpenAI Error Param:", error.param);
    if (error.response && error.response.data) {
        console.error("  Full error object (raw):", JSON.stringify(error.response.data, null, 2));
    } else {
        console.error("  Full error object (raw):", JSON.stringify(error, Object.getOwnPropertyNames(error), 2));
    }

    const errorMessage = error.message || 'An unknown error occurred with the OpenAI API.';
    const statusCode = error.status || 500;

    res.status(statusCode).json({ error: errorMessage });
  }
});

app.use((err, req, res, next) => {
  console.error('--- Unhandled Application Error ---');
  console.error('Error details:', err);
  res.status(500).json({ error: err.message || 'Internal Server Error (Unhandled)' });
});

app.use((req, res) => {
  res.status(404).json({
    error: 'Endpoint not found',
    method: req.method,
    path: req.originalUrl
  });
});

app.listen(port, '0.0.0.0', () => {
  console.log(`тЬЕ Server running on http://0.0.0.0:${port}`);
  console.log(`Frontend URL for CORS: ${frontendUrl}`);
});